---
title: "Gazpollu"
---

## Carte interactive de la région Occitanie et concentration du gaz NOx.

Dans ce paragraphe, on utilise quatres urls contenant les données de gazs polluantes sur l'Occitanie durant de 2016 à 2019. Ensuite, nous allons initialiser un dataframe afin d'étudiée plus fînement ces données.



```{python}
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import requests
import folium
from datetime import datetime, timedelta
from matplotlib.animation import FuncAnimation
```

```{python}
# Liste des URL à récupérer
urls = [
    "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/fl_emi_occitanie_epci/FeatureServer/6/query?where=1%3D1&outFields=*&outSR=4326&f=json",
    "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/fl_emi_occitanie_epci/FeatureServer/7/query?where=1%3D1&outFields=*&outSR=4326&f=json",
    "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/fl_emi_occitanie_epci/FeatureServer/8/query?where=1%3D1&outFields=*&outSR=4326&f=json",
    "https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/fl_emi_occitanie_epci/FeatureServer/9/query?where=1%3D1&outFields=*&outSR=4326&f=json"
]

# Initialiser une liste pour stocker les DataFrames
data_frames = []

# Temps d'attente maximal en secondes
timeout_seconds = 60
```

Ici on récupére les données JSON de chaque URL afin de les convertir en DataFrame.

```{python}
# Récupérer les données JSON de chaque URL et les convertir en DataFrame
for url in urls:
    start_time = datetime.now()
    response = requests.get(url)
    elapsed_time = datetime.now() - start_time
    
    # Vérifier si le temps d'attente maximal est dépassé
    if elapsed_time.total_seconds() > timeout_seconds:
        print("Le téléchargement depuis l'URL {} a pris trop de temps. Passer à l'URL suivante.".format(url))
        continue

    data = response.json()
    features = data.get('features', [])
    if features:
        df = pd.json_normalize(features)
        data_frames.append(df)

```

Ici, on concaténe les quatres ulrs pour créer un seule data frame.

```{python}
# Concaténation les DataFrames en un seul
final_df = pd.concat(data_frames, ignore_index=True)
```

On insert les données dans la carte et fonction de la concentration on pourra observer une differentiation de la concentration par une couleur.

```{python}
# Création d'une nouvelle carte Folium
m = folium.Map(location=[44.0, 3.0], zoom_start=6)

# Parcourt toutes les lignes du DataFrame df
for index, row in df.iterrows():
    # Obtient les coordonnées de la ligne
    coords = [row['geometry.rings'][0][0][0], row['geometry.rings'][0][0][1]]
    
    # Obtient la concentration de pollution s'il existe, sinon, utilise une valeur par défaut
    concentration = row['attributes.nox_kg']  # Remplacez 'nox_kg' par le nom de la colonne correspondante
    pollution_type = row['attributes.lib_epci']  # Remplacez 'lib_epci' par le nom de la colonne correspondante
    
    # Détermine la couleur en fonction de la concentration
    if concentration < 66555:
        color = 'green'
    elif concentration < 109240:
        color = 'yellow'
    elif concentration < 161250:
        color = 'orange'
    else:
        color = 'red'

    # Ajoute un marqueur à la carte pour cette caractéristique avec la couleur appropriée
    marker = folium.CircleMarker(location=coords[::-1], radius=5, color=color, fill=True, fill_color=color)
    
    # Ajoute un popup avec les informations de concentration et de type de pollution
    popup_text = f'Communauté: {pollution_type}<br>Concentration NOx_kg: {concentration}'#NOx (oxyde d'azote) polluants atmosphérique
    folium.Popup(popup_text, max_width=300).add_to(marker)
    
    marker.add_to(m)

```

Nous pouvons observer la carte après traittement ci-dessous.

```{python}
# Affiche la carte
m
```

```{python}
m.save("concentration NOx.html")
```

## Les graphiques et l'évolution du gaz NOx 

Nous pouvons constater à travers les graphiques ci-dessous l'évolution du gaz (Oxydes d'azotes) Nox et et la gaz Co (Monoxyde de carbone). 

Le Monoxyde de carbone represente un danger pour la santé, en effet c'est un gaz très toxique. Il arrive a pénètrer dans l'organisme par les poumons et prends la place de l'oxygène dans le sang. 
Les Oxydes d'azote quant à eux sont les principaux polluants atmosphériques, le trafic routier est responsable de plus de la moitié de leurs émissions.

```{python}
# Liste des années à tracer
annees = [2016, 2017, 2018, 2019]

# Créer un graphique pour chaque année
fig1, axs1 = plt.subplots(4, 1, figsize=(10, 16))
for i, annee in enumerate(annees):
    df_annee = final_df[final_df['attributes.annee_inv'] == annee]
    axs1[i].bar(df_annee.index, df_annee['attributes.nox_kg'], label='NOx')
    axs1[i].bar(df_annee.index, df_annee['attributes.co_kg'], label='CO', alpha=0.5)
    axs1[i].set_title('Concentration de gaz pour l\'année {}'.format(annee))
    axs1[i].set_xlabel('Index')
    axs1[i].set_ylabel('Concentration de gaz')
    axs1[i].legend()

plt.tight_layout()

plt.show()
```

A présent, nous allons affficher les concentrations Co et du NOx depuis l'année 2016 à 2017 et analyser l'évolution de ces gazs au cours de ses quatres années.

```{python}
# Créer un graphique final qui montre l'évolution de la concentration de gaz au fil des ans
fig2, ax2 = plt.subplots(figsize=(10, 4))
for annee in annees:
    df_annee = final_df[final_df['attributes.annee_inv'] == annee]
    ax2.plot(df_annee.index, df_annee['attributes.nox_kg'], label='NOx Année {}'.format(annee))
    ax2.plot(df_annee.index, df_annee['attributes.co_kg'], label='CO Année {}'.format(annee))

ax2.set_title('Évolution de la concentration de gaz de 2016 à 2019')
ax2.set_xlabel('Index')
ax2.set_ylabel('Concentration de gaz')
ax2.legend()

plt.tight_layout()

# Enregistrer le graphique en format SVG
plt.savefig('Comparaison_concentration_gaz_2016_2019.svg')

plt.show()


```

Par la suite, nous allons faire un diagramme en camembert afin de déterminer le polluant la plus polluante. Nous pouvons visualiser tout ça juste en dessous après le code de celui-ci.  

```{python}
NOx = final_df['attributes.nox_kg'].sum()#somme du polluant NOx
CO = final_df['attributes.co_kg'].sum()
SO2 = final_df['attributes.so2_kg'].sum()
covnm = final_df['attributes.covnm_kg'].sum()
NH3 = final_df['attributes.nh3_kg'].sum()
CO2 = final_df['attributes.co2_t'].sum()

#vecteur des sommes des polluants
vect_pollu = [NOx,CO,SO2,covnm,NH3,CO2]

polluants = ["attributes.nox_kg",
             "attributes.co_kg",
             "attributes.so2_kg",
             "attributes.covnm_kg",
            "attributes.nh3_kg",
            "attributes.co2_t"]

              
#création d'un graphique en camembert
plt.pie(vect_pollu, labels = polluants, autopct='%1.1f%%')
plt.title("La concentracion des principaux polluants entre 2016 et 2019")

# On enregistre en formats svg
plt.savefig("La concentracion des principaux polluants entre 2016 et 2019.svg",format = 'svg')

#on affiche le grafique
plt.show()
```


```{python}
# définition de la figure
fig, ax = plt.subplots(figsize=(5, 3))

# génération des données
x = np.random.randn(100)
y = np.random.randn(100)
z = 10*np.random.randn(100)
 
# définition du graphique
nuage = ax.scatter(x, y)

# fonction déanimation
def animate(i):
    nuage.set_sizes(z*i)

# construction de l'objet animé
anim = FuncAnimation(fig, animate, interval=100, frames=len(y)-1)

#  on enregistre l'annimation
anim.save('nuages_de_points.mp4')

# affichage du graphique
plt.show()
```

```{python}

```